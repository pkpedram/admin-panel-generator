const fs = require('fs');
const mkdirp = require('mkdirp');
const { capitalizeFirstLetter } = require('../utils');


const generateActions = async (data) => {
    console.log('GENERATING REDUX ACTIONS...')
    let allKeys = Object.keys(data?.paths)
    let parts = allKeys.map(itm => itm.split('/')[1]).filter((value, index, self) => self.indexOf(value) === index);
    let subParts = parts.map(itm => (
        {
            partName: itm,
            subParts:  Object.keys(data?.paths).filter(item => item.split('/')[1] == itm).map(itm => ({
                name: itm,
                methods: Object.keys(data.paths[itm]).filter(itm => itm !== 'parameters'),
                isInfo:  itm.includes('{id}')
            }))
            

        }
    ))
    


      await  mkdirp('src/Redux/Actions/')
        fs.writeFileSync('src/Redux/Actions/index.js', `
        // GENERATED BY PEDRAM_SWAGGER_REDUX_GENERATOR
            ${
                parts.map(part =>  `export { default as ${part}Actions } from './${capitalizeFirstLetter(part)}'`).join('\n')
            }
            export {default as userActions} from './User'
            export {default as customActions} from './Custom'
            export {default as filterActions} from './Filter'
            export {default as publicActions} from './Public'
            


        
        `, (err) => {
            console.error(err)
        })

    parts.map(async part => {
        await mkdirp(`src/Redux/Actions/${capitalizeFirstLetter(part)}/`)
        fs.writeFileSync(`src/Redux/Actions/${capitalizeFirstLetter(part)}/index.js`, `

        //GENERATED BY PEDRAM_SWAGGER_REDUX_GENERATOR

        import _dataManager from "../../dataManager";

        const ${part}Actions = {
            ${
                subParts.find(itm => itm.partName == part).subParts.map(subPart => {
                    if(subPart.isInfo){
                       return subPart.methods.map(method => {
                        
                            switch(method){
                                case 'get':
                                    return `        get${capitalizeFirstLetter( subPart.name.includes('{id}')  ? subPart.name.split('/').filter(itm => itm !== '{id}' && itm !== part ).join('-') : subPart.name.split('/').filter(itm => itm !== part ).join('-'))}Info: (id = '') => async dispatch => {
             await _dataManager.get('${subPart.name.split('/').filter(itm => itm !== '{id}').join('/')}' + id + '/', {}, {dispatch}, {id: id});
        },`
                                case 'put':
                                    return `        put${capitalizeFirstLetter( subPart.name.includes('{id}') ? subPart.name.split('/').filter(itm => itm !== '{id}' && itm !== part ).join('-') : subPart.name.split('/')[2])}: (data = {},id = '') => async dispatch => {
             await _dataManager.put('${subPart.name.split('/').filter(itm => itm !== '{id}').join('/')}' + id + '/', data, {}, {id: id}, true);
        },`
                                case 'patch':
                                    return `        patch${capitalizeFirstLetter( subPart.name.includes('{id}') ? subPart.name.split('/').filter(itm => itm !== '{id}' && itm !== part ).join('-') : subPart.name.split('/')[2])}: (data = {},id = '') => async dispatch => {
             await _dataManager.patch('${subPart.name.split('/').filter(itm => itm !== '{id}').join('/')}' + id + '/', data, {}, {id: id}, true);
        },`
                                case 'delete':
                                    return `        delete${capitalizeFirstLetter( subPart.name.includes('{id}') ? subPart.name.split('/').filter(itm => itm !== '{id}' && itm !== part ).join('-') : subPart.name.split('/')[2])}: (id = '') => async dispatch => {
             await _dataManager.delete('${subPart.name.split('/').filter(itm => itm !== '{id}').join('/')}' + id + '/', {}, {}, {id: id}, true);
        },`
                            }
                        }).join('\n')
                    }
                    else{
                        return subPart.methods.map(method => {
                              
                            switch(method){
                                
                                case 'get':
                                return `        get${capitalizeFirstLetter(subPart.name.split('/').filter(itm => itm !== part ).join('-'))}List: (data = {}, params = {}) => async dispatch => {
             await _dataManager.get('${subPart.name}', data, {dispatch, params: params});
        },`
                                case 'post':
            return `        post${capitalizeFirstLetter(subPart.name.split('/').filter(itm => itm !== part ).join('-'))}: (data = {}) => async dispatch => {
            await _dataManager.post('${subPart.name}', data, {}, {}, true);
        },`
                            }
                        }).join('\n')
                    }
                }).join('\n')
            }
        }

        export default ${part}Actions

        `,(err) => {
            console.log(err)
        })
    })

    console.log('REDUX ACTIONS GENERATED SUCCESSFULLY!')
    
}

module.exports = generateActions