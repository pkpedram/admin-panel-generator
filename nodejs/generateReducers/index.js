const fs = require('fs');
const mkdirp = require('mkdirp');
const { capitalizeFirstLetter } = require('../utils');


const generateReducers = async (data) => {
    console.log('GENERATING REDUX REDUCERS...')
    let allKeys = Object.keys(data?.paths)
    let parts = allKeys.map(itm => itm.split('/')[1]).filter((value, index, self) => self.indexOf(value) === index);
    let subParts = parts.map(itm => (
        {
            partName: itm,
            subParts:  Object.keys(data?.paths).filter(item => item.split('/')[1] == itm).map(itm => ({
                name: itm,
                methods: Object.keys(data.paths[itm]).filter(itm => itm !== 'parameters'),
                isInfo:  itm.includes('{id}')
            }))
            

        }
    ))
    


      await  mkdirp('src/Redux/Reducers/')
        fs.writeFileSync('src/Redux/Reducers/index.js', `
        // GENERATED BY PEDRAM_SWAGGER_REDUX_GENERATOR
            ${
                parts.map(part =>  `export { default as ${part}State } from './${capitalizeFirstLetter(part)}'`).join('\n           ')
            }
            export {default as userState} from './User'
            export {default as customState} from './Custom'
            export {default as filterState} from './Filter'
            export {default as publicState} from './Public'
            


        
        `, (err) => {
            console.error(err)
        })

    parts.map(async part => {
        await mkdirp(`src/Redux/Reducers/${capitalizeFirstLetter(part)}/`)
        fs.writeFileSync(`src/Redux/Reducers/${capitalizeFirstLetter(part)}/index.js`, `

        //GENERATED BY PEDRAM_SWAGGER_REDUX_GENERATOR

        const initialState = {
            ${
                subParts.find(itm => itm.partName == part).subParts.map(subPart => {

                    if(subPart.isInfo){
                        return `${capitalizeFirstLetter( subPart.name.includes('{id}')  ? subPart.name.split('/').filter(itm => itm !== '{id}' && itm !== part ).join('-') : subPart.name.split('/').filter(itm => itm !== part ).join('-'))}Info: {},`
                    }else{
                        return `${capitalizeFirstLetter(subPart.name.split('/').filter(itm => itm !== part ).join('-'))}List: [],`
                    }
                }).join('\n             ')
            }
        }

        
        export default function ${part}State(state = initialState, action) {
        let { type, payload, params } = action;
            
            switch(type){
                
                ${
                    subParts.find(itm => itm.partName == part).subParts.map(subPart => {
                        if(subPart.isInfo){
                           return `
                           case '${subPart.name.split('/').filter(itm => itm !== '{id}').join('/')}' + params?.id + '/':
                                return {
                                    ...state,
                                    ${capitalizeFirstLetter( subPart.name.includes('{id}')  ? subPart.name.split('/').filter(itm => itm !== '{id}' && itm !== part ).join('-') : subPart.name.split('/').filter(itm => itm !== part ).join('-'))}Info: payload
                                }
                           `
                        }
                        else{
                            return `
                            case '${subPart.name}':
                                return {
                                    ...state,
                                    ${capitalizeFirstLetter(subPart.name.split('/').filter(itm => itm !== part ).join('-'))}List: payload.results
                                }
                            `
                        }
                    }).join('')
                }

                default:
                    return state;
            }

        }

        

        `,(err) => {
            console.log(err)
        })
    })

    console.log('REDUX REDUCERS GENERATED SUCCESSFULLY!')
    
}

module.exports = generateReducers